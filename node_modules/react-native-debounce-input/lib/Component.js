"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DelayInput = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactNative = require("react-native");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DelayInput = exports.DelayInput = function (_React$PureComponent) {
  _inherits(DelayInput, _React$PureComponent);

  function DelayInput(props) {
    _classCallCheck(this, DelayInput);

    var _this = _possibleConstructorReturn(this, (DelayInput.__proto__ || Object.getPrototypeOf(DelayInput)).call(this, props));

    _this.timerId = null;

    _this.notify = function (value) {
      var _this$props = _this.props,
          onChangeText = _this$props.onChangeText,
          minLength = _this$props.minLength;


      var valueToUpdate = value.length >= minLength ? value : "";

      onChangeText(valueToUpdate);
    };

    _this.runTimeoutUpdate = function (value) {
      var delayTimeout = _this.props.delayTimeout;


      _this.resetTimer();
      _this.timerId = setTimeout(function () {
        return _this.notify(value);
      }, delayTimeout);
    };

    _this.onChangeText = function (value) {
      var minLength = _this.props.minLength;


      var valueToUpdate = value.length >= minLength ? value : "";

      _this.setState({ value: value }, function () {
        return _this.runTimeoutUpdate(valueToUpdate);
      });
    };

    _this.onBlur = function () {
      _this.resetTimer();
      _this.notify(_this.state.value);
    };

    _this.state = {
      value: props.value || ""
    };
    return _this;
  }

  _createClass(DelayInput, [{
    key: "resetTimer",
    value: function resetTimer() {
      clearTimeout(this.timerId);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.resetTimer();
    }
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          onChangeText = _props.onChangeText,
          inputRef = _props.inputRef,
          props = _objectWithoutProperties(_props, ["onChangeText", "inputRef"]);

      var value = this.state.value;


      return _react2.default.createElement(_reactNative.TextInput, _extends({}, props, {
        onChangeText: this.onChangeText,
        onBlur: this.onBlur,
        value: value,
        ref: inputRef
      }));
    }
  }]);

  return DelayInput;
}(_react2.default.PureComponent);

DelayInput.defaultProps = {
  delayTimeout: 600,
  minLength: 3,
  onChangeText: undefined,
  value: undefined,
  inputRef: undefined
};
exports.default = DelayInput;